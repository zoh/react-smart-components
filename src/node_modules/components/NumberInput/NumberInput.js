import React from 'react'
//
import PropTypes from 'prop-types';


const divider = ',';


function prepare(val) {
  if (!val) {
    return val
  }
  return String(val).replace(/\./g, divider)
}

class NumberInput extends React.Component {

  constructor(props) {
    super(props);

    this.state = {
      value: prepare(props.value)
    };

    this._onChange = this._onChange.bind(this);
    this.onBlur = this.onBlur.bind(this);

    this.input = React.createRef();
  }

  componentWillReceiveProps(newProps) {
    if (this.input.current !== document.activeElement) {
      this.setState({
        value: prepare(newProps.value)
      })
    }
  }

  _onChange(e) {
    let value = e.target.value;

    if (new RegExp(/^[0-9\.,-\s]*$/).test(value) == false) {
      e.preventDefault(false);
      return this.setState({
        value: this.state.value
      })
    }

    if (value == " ") {
      value = "0,"
    } else {
      value = value.replace(/(\d+)\s/, "$1" + divider);
    }

    if (isNaN(Number(value.replace(divider, '')))) {
      return;
    }

    this.setState({
      value
    }, () => this.storeValue(value))
  }

  onBlur(e) {
    const newVal = this.storeValue(e.target.value);
    this.setState({ value: newVal });
    if (this.props.onBlur) {
      this.props.onBlur(e)
    }
  }

  storeValue(value) {
    value = String(value).replace(divider, '.');
    var newVal = Number(value);

    if (value === '') {
      return this.props.onChange(null)
    }

    if (this.props.digits != undefined) {
      newVal = parseFloat(
        // String(newVal).match(new RegExp("^-?\\d+(?:\\.\\d{0," +this.props.digits+ ")?"))[0]
        String(newVal).match(new RegExp("^-?\\d+(?:\\.\\d{0," + this.props.digits + "})?"))[0]
      );
    }

    if (value == newVal) {
      this.props.onChange(newVal)
    }

    return newVal
  }

  render() {
    let {...props} = this.props;
    let {value} = this.state;

    if (value===null || value === undefined) {
      value = '';
    }

    return (
      <input
        ref={this.input}
        className="form-control"
        {...props}
        type="text"
        onBlur={this.onBlur}
        onChange={this._onChange}
        value={value}
      />
    )
  }
}

NumberInput.propTypes = {
  // count numbers after dot(comma)
  digits: PropTypes.number
};


export default NumberInput
